name: AI Code Review

on:
  pull_request:
    types: [opened, synchronize]  # Trigger on PR creation and updates

permissions:
  contents: write       # For committing review.json and auto-formatting/linting
  pull-requests: write  # For creating reviews and comments

jobs:
  gemini-code-review:
    runs-on: ubuntu-latest
    steps:
      - name: 📊 PR Info
        env:
          PR_NUMBER: ${{ github.event.pull_request.number }}
          REPO: ${{ github.repository }}
        run: |
          echo "Pull Request Number: $PR_NUMBER"
          echo "Repository: $REPO"
          echo "Event type: ${{ github.event.action }}"
          echo "PR Head SHA: ${{ github.event.pull_request.head.sha }}"
          echo "PR Base SHA: ${{ github.event.pull_request.base.sha }}"

      - name: 👀 Checkout Repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Needed for diffing against base SHA

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: 🐍 Set up Python and Install Dependencies
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      - run: |
          pip install flake8 google-generativeai PyGithub unidiff "google-ai-generativelanguage>=0.6.0" github3.py requests

      - name: 🔍 JS Syntax Check
        run: |
          echo "Running Node.js syntax validation on app/ directory..."
          set -e
          errors=0
          summary=""
          js_files=$(find app -type f -name "*.js" 2>/dev/null)
          if [ -z "$js_files" ]; then
            echo "No JavaScript files found in app/ to check."
          else
            for file in $js_files; do
              echo "Checking $file"
              if ! output=$(node --check "$file" 2>&1); then
                errors=$((errors+1))
                summary+="$file:\n$output\n\n"
              fi
            done
          fi
          if [ "$errors" -gt 0 ]; then
            echo -e "⚠️ Syntax errors found in $errors JavaScript files:\n"
            echo -e "$summary"
            exit 1
          else
            echo "✅ No syntax errors detected in JavaScript files."
          fi

      - name: 🐍 Python Syntax Check
        run: |
          echo "Running Python validation on .github/ and other specified .py files..."
          set -e
          errors=0
          summary=""
          py_files_to_check=$(find .github -type f -name "*.py" 2>/dev/null)

          if [ -z "$py_files_to_check" ]; then
            echo "No Python files found in specified paths to check."
          else
            echo "Step 1: Basic syntax check with py_compile"
            for file in $py_files_to_check; do
              echo "Checking $file with py_compile"
              if ! output=$(python -m py_compile "$file" 2>&1); then
                errors=$((errors+1)) # Increment for each file with py_compile errors
                summary+="$file (py_compile syntax error):\n$output\n\n"
              fi
            done

            echo "\nStep 2: Checking for AST parsing issues (e.g., f-string errors)"
            # Reset errors for this step if you want to count them separately, or use a different counter
            ast_errors=0
            ast_summary=""
            for file in $py_files_to_check; do
              echo "Checking $file with ast.parse"
              if ! python -c "import ast; ast.parse(open('$file', encoding='utf-8').read())" 2>&1 >/dev/null; then
                 # Check if py_compile already flagged this file to avoid redundant general error messages
                 # This is a heuristic, ast.parse might catch different things.
                 if ! grep -q "$file (py_compile syntax error)" <<< "$summary"; then
                    ast_errors=$((ast_errors+1))
                    ast_summary+="$file (AST parsing error, e.g., f-string):\nPython's AST parser failed. Check syntax, especially f-strings.\n\n"
                 fi
              fi
            done
            if [ "$ast_errors" -gt 0 ]; then
              summary+=$ast_summary
              errors=$((errors + ast_errors)) # Add to total errors if counting distinctly
            fi


            echo "\nStep 3: Checking for critical errors with flake8"
            flake8_errors=0
            flake8_summary=""
            for file in $py_files_to_check; do
              echo "Running flake8 on $file"
              output=$(flake8 --select=E9,F821 "$file" 2>&1)
              if [ -n "$output" ]; then
                # Check if similar errors already reported to avoid too much noise
                if ! grep -q "$file" <<< "$summary"; then # Simple check
                    flake8_errors=$((flake8_errors+1))
                    flake8_summary+="$file (flake8 critical errors E9/F821):\n$output\n\n"
                fi
              fi
            done
            if [ "$flake8_errors" -gt 0 ]; then
              summary+=$flake8_summary
              errors=$((errors + flake8_errors)) # Add to total errors
            fi
          fi

          if [ "$errors" -gt 0 ]; then # Use the master 'errors' counter
            echo -e "\n⚠️ Issues found in Python files:\n"
            echo -e "$summary"
            exit 1
          else
            echo "\n✅ No critical issues detected in Python files."
          fi

      - name: ✅ Verify Biome Setup
        run: |
          echo "Biome version:"
          npx --no-update-notifier -y @biomejs/biome --version
          if [ -f "biome.json" ]; then
            echo "Found biome.json configuration. Validating..."
            echo "// Test file for Biome config validation" > biome-test.js
            npx --no-update-notifier -y @biomejs/biome check biome-test.js || echo "Warning: Biome config validation check encountered an issue, but continuing."
            rm biome-test.js
          else
            echo "No biome.json found. Biome will use default settings."
          fi

      - name: 💅🏻 Biome Format and Commit
        run: |
          echo "Running Biome formatter..."
          npx --no-update-notifier -y @biomejs/biome format --write app/ || true

          export GIT_AUTHOR_NAME="dtub[bot]"
          export GIT_AUTHOR_EMAIL="209926867+dtub[bot]@users.noreply.github.com"
          export GIT_COMMITTER_NAME="dtub[bot]"
          export GIT_COMMITTER_EMAIL="209926867+dtub[bot]@users.noreply.github.com"

          git checkout -- package-lock.json 2>/dev/null || true
          git checkout -- package.json 2>/dev/null || true
          git add -A app/ || true

          if [[ -n $(git diff --cached --name-only) ]]; then
            echo "Formatting changes detected, committing..."
            git commit -m "💅🏻 Auto-format with Biome" || echo "Commit failed (format), but continuing"
            git push origin HEAD:${{ github.event.pull_request.head.ref }} || echo "Push failed (format), but continuing"
            echo "Formatting changes committed and pushed."
          else
            echo "No changes to commit after formatting."
          fi

      - name: 🪮 Biome Lint and Commit
        run: |
          echo "Running Biome linter with --apply --unsafe ..."
          npx --no-update-notifier -y @biomejs/biome lint --apply --unsafe app/ || true

          export GIT_AUTHOR_NAME="dtub[bot]"
          export GIT_AUTHOR_EMAIL="209926867+dtub[bot]@users.noreply.github.com"
          export GIT_COMMITTER_NAME="dtub[bot]"
          export GIT_COMMITTER_EMAIL="209926867+dtub[bot]@users.noreply.github.com"

          git checkout -- package-lock.json 2>/dev/null || true
          git checkout -- package.json 2>/dev/null || true
          git add -A app/ || true

          if [[ -n $(git diff --cached --name-only) ]]; then
            echo "Linting changes detected, committing..."
            git commit -m "🪮 Auto-lint with Biome" || echo "Commit failed (lint), but continuing"
            git push origin HEAD:${{ github.event.pull_request.head.ref }} || echo "Push failed (lint), but continuing"
            echo "Linting changes committed and pushed."
          else
            echo "No changes to commit after linting."
          fi

      - name: 👀 Checkout latest code after auto-fixes
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          repository: ${{ github.event.pull_request.head.repo.full_name }}
          fetch-depth: 0

      - name: 🧠 Run code review on final code
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          GEMINI_MODEL: gemini-2.5-flash-preview-04-17 # As per your request
          INPUT_EXCLUDE: "*.md,*.txt,*.json,*.lock,*.yml,*.yaml,*.svg,*.png,*.jpg,*.jpeg,*.gif,*.ico,*.woff,*.woff2,*.ttf,*.eot,*.otf,*.map,*.min.js,*.min.css,reviews/gemini-pr-review.json,*.test.js,*.d.ts,vendor/**,node_modules/**,dist/**,build/**"
          GITHUB_EVENT_PATH: ${{ github.event_path }}
          GITHUB_EVENT_NAME: ${{ github.event_name }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_SERVER_URL: ${{ github.server_url }}
          GITHUB_HEAD_REF: ${{ github.head_ref }}
          GITHUB_RUN_ID: ${{ github.run_id }}
          GITHUB_JOB: ${{ github.job }}
        run: |
          max_attempts=3
          attempt=1
          while [ $attempt -le $max_attempts ]; do
            echo "Attempt $attempt of $max_attempts to run code review script"
            if python .github/workflows/gemini-pr-review.py; then
              echo "Code review script completed successfully"
              break
            else
              exit_code=$?
              echo "Code review script failed with exit code $exit_code"
              if [ $attempt -lt $max_attempts ]; then
                sleep_time=$((60 * attempt))
                echo "Waiting $sleep_time seconds before retrying..."
                sleep $sleep_time
              else
                echo "All attempts for code review script failed."
                # Allow workflow to continue to commit review.json even if script failed
                echo "Continuing workflow despite script failure after retries to commit artifacts."
              fi
            fi
            attempt=$((attempt + 1))
          done

      - name: 🧪 Run Tests with Coverage
        continue-on-error: true
        run: |
          mkdir -p coverage
          if [ -f "tests/index.js" ]; then
            npx --no-update-notifier -y c8 node tests/index.js
            [ -d "coverage" ] || echo "Warning: Coverage directory not found after running tests."
          else
            echo "Warning: Test entry point tests/index.js not found. Skipping tests."
          fi

      - name: 💾 Commit review artifacts (review JSON)
        run: |
          mkdir -p reviews

          # Always commit the review JSON file, even if empty, to ensure we have the latest state
          if [ -f "reviews/gemini-pr-review.json" ]; then
            # Check if the file contains any review comments (for logging purposes)
            review_comments_count=$(jq '.review_comments | length' reviews/gemini-pr-review.json)
            echo "Found $review_comments_count review comments in the JSON file."

            export GIT_AUTHOR_NAME="dtub[bot]"
            export GIT_AUTHOR_EMAIL="209926867+dtub[bot]@users.noreply.github.com"
            export GIT_COMMITTER_NAME="dtub[bot]"
            export GIT_COMMITTER_EMAIL="209926867+dtub[bot]@users.noreply.github.com"

            # Add the JSON file. Script generates .json in reviews/ directory.
            git add reviews/gemini-pr-review.json 2>/dev/null || true

            if git diff --staged --quiet --exit-code; then
              echo "No changes to review artifacts (gemini-pr-review.json) to commit."
            else
              # Use different commit messages based on whether there are comments or not
              if [ "$review_comments_count" -gt 0 ]; then
                commit_message="👁️‍🗨️ Update Gemini PR review results with $review_comments_count comments"
              else
                commit_message="👁️‍🗨️ Update Gemini PR review results (no issues found)"
              fi

              git commit -m "$commit_message"

              # Push to the PR branch. Retry push a few times in case of temporary conflict.
              for i in 1 2 3; do
                git pull --rebase origin ${{ github.event.pull_request.head.ref }} || true # Try to rebase before push
                if git push origin HEAD:${{ github.event.pull_request.head.ref }}; then
                  echo "Push of review artifacts succeeded."
                  break
                fi
                if [ "$i" -eq 3 ]; then
                  echo "Push of review artifacts failed after multiple attempts."
                else
                  echo "Push failed, retrying in 10s..."
                  sleep 10
                fi
              done
            fi
          else
            echo "Review JSON file not found. This is unexpected as the script should always generate it."
          fi